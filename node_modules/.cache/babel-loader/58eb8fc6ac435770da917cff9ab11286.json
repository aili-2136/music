{"remainingRequest":"D:\\Less\\小罗音乐\\node_modules\\babel-loader\\lib\\index.js!D:\\Less\\小罗音乐\\src\\plugins\\cache.js","dependencies":[{"path":"D:\\Less\\小罗音乐\\src\\plugins\\cache.js","mtime":1663424462848},{"path":"D:\\Less\\小罗音乐\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662623268261},{"path":"D:\\Less\\小罗音乐\\node_modules\\babel-loader\\lib\\index.js","mtime":1662623271902}],"contextDependencies":[],"result":["import _slicedToArray from \"D:\\\\Less\\\\\\u5C0F\\u7F57\\u97F3\\u4E50\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.entries\";\nimport \"core-js/modules/es6.array.map\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\Less\\\\\\u5C0F\\u7F57\\u97F3\\u4E50\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"D:\\\\Less\\\\\\u5C0F\\u7F57\\u97F3\\u4E50\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\Less\\\\\\u5C0F\\u7F57\\u97F3\\u4E50\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Less\\\\\\u5C0F\\u7F57\\u97F3\\u4E50\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\n// 缓存池\nvar CACHES = {};\n\nvar Cache =\n/*#__PURE__*/\nfunction () {\n  function Cache(axios) {\n    _classCallCheck(this, Cache);\n\n    this.axios = axios;\n    this.cancelToken = axios.CancelToken;\n    this.options = {};\n  }\n\n  _createClass(Cache, [{\n    key: \"use\",\n    value: function use(options) {\n      var defaults = _objectSpread({\n        expire: 60000,\n        // 过期时间 默认一分钟\n        storage: false,\n        // 是否开启缓存\n        storage_expire: 3600000,\n        // 本地缓存过期时间 默认一小时\n        instance: this.axios,\n        // axios的实例对象 默认指向当前axios\n        requestConfigFn: null,\n        // 请求拦截的操作函数 参数为请求的config对象 返回一个Promise\n        responseConfigFn: null\n      }, options);\n\n      this.options = defaults;\n      this.init(); // if (options && !options.instance) return this.options.instance\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      // 初始化\n      var options = this.options;\n\n      if (options.storage) {\n        // 如果开启本地缓存 则设置一个过期时间 避免时间过久 缓存一直存在\n        this._storageExpire('expire').then(function () {\n          if (localStorage.length === 0) CACHES = {};else mapStorage(localStorage, 'get');\n        });\n      }\n\n      this.request(options.requestConfigFn);\n      this.response(options.responseConfigFn);\n    }\n  }, {\n    key: \"request\",\n    value: function request(cb) {\n      var _this = this;\n\n      // 请求拦截器\n      var options = this.options;\n      options.instance.interceptors.request.use(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee(config) {\n          var newConfig, source, data, expire;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.t0 = cb;\n\n                  if (!_context.t0) {\n                    _context.next = 5;\n                    break;\n                  }\n\n                  _context.next = 4;\n                  return cb(config);\n\n                case 4:\n                  _context.t0 = _context.sent;\n\n                case 5:\n                  newConfig = _context.t0;\n                  config = newConfig || config;\n\n                  if (config.cache) {\n                    source = _this.cancelToken.source();\n                    config.cancelToken = source.token;\n                    data = CACHES[config.url];\n                    expire = getExpireTime(); // 判断缓存数据是否存在 存在的话 是否过期 没过期就返回\n\n                    if (data && expire - data.expire < _this.options.expire) {\n                      source.cancel(data);\n                    }\n                  }\n\n                  return _context.abrupt(\"return\", config);\n\n                case 9:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"response\",\n    value: function response(cb) {\n      var _this2 = this;\n\n      // 响应拦截器\n      this.options.instance.interceptors.response.use(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee2(response) {\n          var newResponse, data;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.t0 = cb;\n\n                  if (!_context2.t0) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  _context2.next = 4;\n                  return cb(response);\n\n                case 4:\n                  _context2.t0 = _context2.sent;\n\n                case 5:\n                  newResponse = _context2.t0;\n                  response = newResponse || response;\n\n                  if (response.config.method === 'get' && response.config.cache) {\n                    data = {\n                      expire: getExpireTime(),\n                      data: response\n                    };\n                    CACHES[\"\".concat(response.config.url)] = data;\n                    if (_this2.options.storage) mapStorage(CACHES);\n                  }\n\n                  return _context2.abrupt(\"return\", response);\n\n                case 9:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }(), function (error) {\n        // 返回缓存数据\n        if (_this2.axios.isCancel(error)) {\n          return Promise.resolve(error.message.data);\n        }\n\n        return Promise.reject(error);\n      });\n    } // 本地缓存过期判断\n\n  }, {\n    key: \"_storageExpire\",\n    value: function _storageExpire(cacheKey) {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        var key = getStorage(cacheKey);\n        var date = getExpireTime();\n\n        if (key) {\n          // 缓存存在 判断是否过期\n          var isExpire = date - key < _this3.options.storage_expire; // 如果过期 则重新设定过期时间 并清空缓存\n\n          if (!isExpire) {\n            removeStorage();\n          }\n        } else {\n          setStorage(cacheKey, date);\n        }\n\n        resolve();\n      });\n    }\n  }]);\n\n  return Cache;\n}();\n/**\n * caches: 缓存列表\n * type: set->存 get->取\n */\n\n\nexport { Cache as default };\n\nfunction mapStorage(caches) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'set';\n  Object.entries(caches).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        cache = _ref4[1];\n\n    if (type === 'set') {\n      setStorage(key, cache);\n    } else {\n      // 正则太弱 只能简单判断是否是json字符串\n      var reg = /\\{/g;\n      if (reg.test(cache)) CACHES[key] = JSON.parse(cache);else CACHES[key] = cache;\n    }\n  });\n} // 清除本地缓存\n\n\nfunction removeStorage() {\n  localStorage.clear();\n} // 设置缓存\n\n\nfunction setStorage(key, cache) {\n  localStorage.setItem(key, JSON.stringify(cache));\n} // 获取缓存\n\n\nfunction getStorage(key) {\n  var data = localStorage.getItem(key);\n  return JSON.parse(data);\n} // 设置过期时间\n\n\nfunction getExpireTime() {\n  return new Date().getTime();\n}",{"version":3,"sources":["D:\\Less\\小罗音乐\\src\\plugins\\cache.js"],"names":["CACHES","Cache","axios","cancelToken","CancelToken","options","defaults","expire","storage","storage_expire","instance","requestConfigFn","responseConfigFn","init","_storageExpire","then","localStorage","length","mapStorage","request","response","cb","interceptors","use","config","newConfig","cache","source","token","data","url","getExpireTime","cancel","newResponse","method","error","isCancel","Promise","resolve","message","reject","cacheKey","key","getStorage","date","isExpire","removeStorage","setStorage","caches","type","Object","entries","map","reg","test","JSON","parse","clear","setItem","stringify","getItem","Date","getTime"],"mappings":"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","sourcesContent":["// 缓存池\nlet CACHES = {}\n \nexport default class Cache {\n  constructor(axios) {\n    this.axios = axios\n    this.cancelToken = axios.CancelToken\n    this.options = {}\n  }\n \n  use(options) {\n    let defaults = {\n      expire: 60000, // 过期时间 默认一分钟\n      storage: false, // 是否开启缓存\n      storage_expire: 3600000, // 本地缓存过期时间 默认一小时\n      instance: this.axios, // axios的实例对象 默认指向当前axios\n      requestConfigFn: null, // 请求拦截的操作函数 参数为请求的config对象 返回一个Promise\n      responseConfigFn: null, // 响应拦截的操作函数 参数为响应数据的response对象 返回一个Promise\n      ...options\n    }\n    this.options = defaults\n    this.init()\n    // if (options && !options.instance) return this.options.instance\n  }\n \n  init() {\n    // 初始化\n    let options = this.options\n    if (options.storage) {\n      // 如果开启本地缓存 则设置一个过期时间 避免时间过久 缓存一直存在\n      this._storageExpire('expire').then(() => {\n        if (localStorage.length === 0) CACHES = {}\n        else mapStorage(localStorage, 'get')\n      })\n    }\n    this.request(options.requestConfigFn)\n    this.response(options.responseConfigFn)\n  }\n \n  request(cb) {\n    // 请求拦截器\n    let options = this.options\n    options.instance.interceptors.request.use(async config => {\n      // 判断用户是否返回 config 的 promise\n      let newConfig = cb && (await cb(config))\n      config = newConfig || config\n      if (config.cache) {\n        let source = this.cancelToken.source()\n        config.cancelToken = source.token\n        let data = CACHES[config.url]\n        let expire = getExpireTime()\n        // 判断缓存数据是否存在 存在的话 是否过期 没过期就返回\n        if (data && expire - data.expire < this.options.expire) {\n          source.cancel(data)\n        }\n      }\n      return config\n    })\n  }\n \n  response(cb) {\n    // 响应拦截器\n    this.options.instance.interceptors.response.use(\n      async response => {\n        // 判断用户是否返回了 response 的 Promise\n        let newResponse = cb && (await cb(response))\n        response = newResponse || response\n        if (response.config.method === 'get' && response.config.cache) {\n          let data = {\n            expire: getExpireTime(),\n            data: response\n          }\n          CACHES[`${response.config.url}`] = data\n          if (this.options.storage) mapStorage(CACHES)\n        }\n        return response\n      },\n      error => {\n        // 返回缓存数据\n        if (this.axios.isCancel(error)) {\n          return Promise.resolve(error.message.data)\n        }\n        return Promise.reject(error)\n      }\n    )\n  }\n \n  // 本地缓存过期判断\n  _storageExpire(cacheKey) {\n    return new Promise(resolve => {\n      let key = getStorage(cacheKey)\n      let date = getExpireTime()\n      if (key) {\n        // 缓存存在 判断是否过期\n        let isExpire = date - key < this.options.storage_expire\n        // 如果过期 则重新设定过期时间 并清空缓存\n        if (!isExpire) {\n          removeStorage()\n        }\n      } else {\n        setStorage(cacheKey, date)\n      }\n      resolve()\n    })\n  }\n}\n \n/**\n * caches: 缓存列表\n * type: set->存 get->取\n */\nfunction mapStorage(caches, type = 'set') {\n  Object.entries(caches).map(([key, cache]) => {\n    if (type === 'set') {\n      setStorage(key, cache)\n    } else {\n      // 正则太弱 只能简单判断是否是json字符串\n      let reg = /\\{/g\n      if (reg.test(cache)) CACHES[key] = JSON.parse(cache)\n      else CACHES[key] = cache\n    }\n  })\n}\n \n// 清除本地缓存\nfunction removeStorage() {\n  localStorage.clear()\n}\n \n// 设置缓存\nfunction setStorage(key, cache) {\n  localStorage.setItem(key, JSON.stringify(cache))\n}\n \n// 获取缓存\nfunction getStorage(key) {\n  let data = localStorage.getItem(key)\n  return JSON.parse(data)\n}\n \n// 设置过期时间\nfunction getExpireTime() {\n  return new Date().getTime()\n}"]}]}