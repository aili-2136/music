{"remainingRequest":"D:\\Less\\小罗音乐\\node_modules\\babel-loader\\lib\\index.js!D:\\Less\\小罗音乐\\src\\plugins\\axios.js","dependencies":[{"path":"D:\\Less\\小罗音乐\\src\\plugins\\axios.js","mtime":1663507295469},{"path":"D:\\Less\\小罗音乐\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662623268261},{"path":"D:\\Less\\小罗音乐\\node_modules\\babel-loader\\lib\\index.js","mtime":1662623271902}],"contextDependencies":[],"result":["import axios from 'axios';\nimport qs from 'qs';\naxios.defaults.withCredentials = true; //允许跨域，不然可能因为拿不到cookie而报错\n\naxios.defaults.baseURL = 'http://121.196.234.83:3000/'; // 请求拦截\n\naxios.interceptors.request.use(function (config) {\n  if (config.meth === 'post' && !(config.data instanceof FormData)) {\n    config.headers = {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    };\n    config.data = qs.stringify(config.data, {\n      arrayFormat: 'repeat'\n    });\n    /*这里是，后端要求传数组的时候做的设置，以前出过错*/\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\n/* 响应拦截 */\n\naxios.interceptors.response.use(function (res) {\n  /*可在这里根据返回的状态码做一些拦截操作*/\n  return res;\n}, function (err) {\n  return Promise.resolve(err);\n});\nexport default axios;",{"version":3,"sources":["D:\\Less\\小罗音乐\\src\\plugins\\axios.js"],"names":["axios","qs","defaults","withCredentials","baseURL","interceptors","request","use","config","meth","data","FormData","headers","stringify","arrayFormat","error","Promise","reject","response","res","err","resolve"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AAGAD,KAAK,CAACE,QAAN,CAAeC,eAAf,GAA+B,IAA/B,C,CAAqC;;AACrCH,KAAK,CAACE,QAAN,CAAeE,OAAf,GAAuB,6BAAvB,C,CAGA;;AACAJ,KAAK,CAACK,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACE,UAAAC,MAAM,EAAI;AACR,MAAIA,MAAM,CAACC,IAAP,KAAgB,MAAhB,IAA0B,EAAED,MAAM,CAACE,IAAP,YAAuBC,QAAzB,CAA9B,EAAkE;AAChEH,IAAAA,MAAM,CAACI,OAAP,GAAiB;AACf,sBAAgB;AADD,KAAjB;AAGAJ,IAAAA,MAAM,CAACE,IAAP,GAAcT,EAAE,CAACY,SAAH,CAAaL,MAAM,CAACE,IAApB,EAA0B;AAAEI,MAAAA,WAAW,EAAE;AAAf,KAA1B,CAAd;AAAmE;AACpE;;AAGD,SAAON,MAAP;AACD,CAXH,EAWK,UAAAO,KAAK,EAAI;AACV,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAbH;AAeA;;AACAf,KAAK,CAACK,YAAN,CAAmBa,QAAnB,CAA4BX,GAA5B,CACE,UAAAY,GAAG,EAAI;AACN;AACC,SAAOA,GAAP;AACD,CAJH,EAIK,UAAAC,GAAG,EAAI;AACN,SAAOJ,OAAO,CAACK,OAAR,CAAgBD,GAAhB,CAAP;AACH,CANH;AAUA,eAAepB,KAAf","sourcesContent":["import axios from 'axios'\r\nimport qs from 'qs'\r\n\r\n\r\naxios.defaults.withCredentials=true\t\t//允许跨域，不然可能因为拿不到cookie而报错\r\naxios.defaults.baseURL='http://121.196.234.83:3000/'\r\n\r\n\r\n// 请求拦截\naxios.interceptors.request.use(\n  config => {\n    if (config.meth === 'post' && !(config.data instanceof FormData)) {\n      config.headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n      config.data = qs.stringify(config.data, { arrayFormat: 'repeat' }) /*这里是，后端要求传数组的时候做的设置，以前出过错*/\n    }\r\n\t\r\n\t\t\n    return config\n  }, error => {\n    return Promise.reject(error)\n  }\n)\n/* 响应拦截 */\naxios.interceptors.response.use(\n  res => {\n   /*可在这里根据返回的状态码做一些拦截操作*/  \n    return res\n  }, err => {\n      return Promise.resolve(err)\n  }\n)\r\n\r\n\nexport default axios  \r\n\r\n"]}]}